%h1#top Lesson 016 [ Part 2: Google Sheets API]

%p When I wrote Lesson 015 I found that setup of OAuth for Google APIs was tricky.

%p Google offers me many choices in several forms when I setup OAuth.

%p I start this lesson with a description of an OAuth path which worked well for me.

%p I started by visiting this URL:

%p
  %a(target='g' href='https://console.cloud.google.com/projectcreate') https://console.cloud.google.com/projectcreate

%p I saw this:

%img(src='/lesson016/lesson016a1.png')
%hr/

%p I filled out the form and clicked the blue-"Create" button:

%img(src='/lesson016/lesson016a2.png')
%hr/

%p After Google created the project, I selected it in the select-options at the top.

%p Google served me info about my new project; I saw this:

%img(src='/lesson016/lesson016a3.png')
%hr/

%p Next, I visited the URL listed below:
%p
  %a(target='g' href='https://console.cloud.google.com/apis/library') https://console.cloud.google.com/apis/library

%p I saw this:

%img(src='/lesson016/lesson016a4.png')
%hr/

%p In the lower-right I clicked the square named: "Google Sheets API"

%p I saw this:

%img(src='/lesson016/lesson016a5.png')
%hr/

%p I clicked the blue-"Enable" button.

%p I saw this:

%img(src='/lesson016/lesson016a6.png')
%hr/

%p I clicked the blue-"CREATE CREDENTIALS" button on the right side.

%p I saw this:

%img(src='/lesson016/lesson016a7.png')
%hr/

%p Below, I display forms I interacted with to setup OAuth for this lesson:

%img(src='/lesson016/lesson016b1.png')
%hr/

%img(src='/lesson016/lesson016b2.png')
%hr/

%img(src='/lesson016/lesson016b3.png')
%hr/

%img(src='/lesson016/lesson016b4.png')
%hr/

%img(src='/lesson016/lesson016b5.png')
%hr/

%img(src='/lesson016/lesson016b6.png')
%hr/

%img(src='/lesson016/lesson016b7.png')
%hr/

%img(src='/lesson016/lesson016b8.png')
%hr/

%img(src='/lesson016/lesson016b9.png')
%hr/

%p This form is simple yet tricky.

%p I only typed in two pieces of data:

%ul
  %li http://localhost:8080
  %li http://localhost:8080/

%p After I enter the second value, I MUST press the tab key so the form will accept it.

%p After I filled out the form correctly, I saw this:

%img(src='/lesson016/lesson016c1.png')
%hr/

%p I clicked the blue-"Create" button; I saw this:

%img(src='/lesson016/lesson016c2.png')
%hr/

%img(src='/lesson016/lesson016c3.png')
%hr/

%p Next, using the down-link on the right, I downloaded a JSON file which contains the credentials.

%p Then I copied the file to this path on my laptop:

%p ~/secret0612.json

%p The file looks like this:

.syntax
  %pre
    =render 'lesson016c4'

%p Next, I used two Bash commands to verify that I had Python3 installed on my Linux laptop:

.syntax
  %pre
    %code
      which python3
      python3

%p Then, I verified I had pip3 installed:
.syntax
  %pre
    %code sudo apt install python3-pip

%p Next, I verified I had some Python3 modules installed:

.syntax
  %pre
    %code sudo pip3 install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib

%p Next, I wrote a Python script to test the credentials:

.syntax
  %pre
    =render 'lesson016sheet11py'
/good

%p After I started the script, it started a web-server and a browser on my laptop.

%p That server created an authentication session between the browser and a Google OAuth server.

%p After that session is established, Google will allow the Python script to use the Sheets-API.

%p I collected screens which appeared on my laptop as the authentication session was setup:

%img(src='/lesson016/lesson016c5.png')
%hr/

%img(src='/lesson016/lesson016c6.png')
%hr/

%img(src='/lesson016/lesson016c7.png')
%hr/

%img(src='/lesson016/lesson016c8.png')
%hr/

%p After the script ran, I noticed artifacts from its activity in the Shell window:

%img(src='/lesson016/lesson016c9.png')
%hr/

%p Next, I wrote a simple script to persist the OAuth session to a Python-pickle file:

.syntax
  %pre
    =render 'lesson016sheet12py'
/ erb good, sheet12.py has extra syntax

%p Notice that the above script grants a wider scope to the session.

%p I collected screens which appeared on my laptop as the authentication session was setup:

%img(src='/lesson016/lesson016d1.png')
%hr/

%img(src='/lesson016/lesson016d2.png')
%hr/

%img(src='/lesson016/lesson016d3.png')
%hr/

%img(src='/lesson016/lesson016d4.png')
%hr/

%img(src='/lesson016/lesson016d5.png')
%hr/

%img(src='/lesson016/lesson016d6.png')
%hr/

%img(src='/lesson016/lesson016d7.png')
%hr/

%p Next, I wrote and ran a simple script to test the pickle file:

.syntax
  %pre
    =render 'lesson016sheet13py'

%p I saw this:

%img(src='/lesson016/lesson016d8.png')
%hr/

%p I visited the URL and saw this:

%img(src='/lesson016/lesson016d9.png')
%hr/

%p The above spreadsheet convinced me that the pickle file full of credentials worked well for me.

%p Next, I wrote a simple script to write some data into a spreadsheet:

.syntax
  %pre
    =render 'lesson016sheet14py'

%p When I ran the script I saw this:

%img(src='/lesson016/lesson016e1.png')
%hr/

%p Also I found the spreadsheet which was created and updated by the script:

%img(src='/lesson016/lesson016e2.png')
%hr/

%p The above Python script demonstrates two calls:

%ul
  %li service.spreadsheets().create()
  %li service.spreadsheets().values().update()

%p The script below replaces the update() call with batchUpdate():

.syntax
  %pre
    =render 'lesson016sheet15py'

%p I ran the above script and collected screen-shots for you:

%img(src='/lesson016/lesson016e3.png')
%hr/

%img(src='/lesson016/lesson016e4.png')
%hr/

%p The script below demonstrates a more complicated call to batchUpdate():

.syntax
  %pre
    =render 'lesson016sheet16py'

%p I ran the above script and collected screen-shots for you:

%img(src='/lesson016/lesson016e5.png')
%hr/

%p Notice, above, that Google wanted me to refresh my OAuth session.

%p I used sheet12.py to refresh the session and capture it with a pickle file.

%p After that, I ran sheet16.py and it created the spreadsheet displayed below:

%img(src='/lesson016/lesson016e6.png')
%hr/

%p Another script below demonstrates a more complicated call to batchUpdate():

.syntax
  %pre
    =render 'lesson016sheet17py'

%p I ran the above script and collected screen-shots for you:

%img(src='/lesson016/lesson016e7.png')
%hr/

%img(src='/lesson016/lesson016e8.png')
%hr/

%p A call which is similar to update() is append().

%p The script below demonstrates append():

.syntax
  %pre
    =render 'lesson016sheet18py'

%p I ran the above script and collected screen-shots for you:

%img(src='/lesson016/lesson016f1.png')
%hr/

%img(src='/lesson016/lesson016f2.png')
%hr/

%p I copied the above script to another script.

%p Then I replaced append() with update().

%p I saw them to be almost identical.

%p I did, however, see a small difference in the object they returned:

.syntax
  %pre
    =render 'lesson016sheet19py'

%p I ran the above script and collected screen-shots for you:

%img(src='/lesson016/lesson016f3.png')
%hr/

%img(src='/lesson016/lesson016f4.png')
%hr/

%p After I got the above demonstrations working, I asked a question:

%p Q: How to make a spreadsheet readable by anyone?

%p The answer is the same as the answer of this question:

%p Q: How to make a Google-drive-file readable by anyone?

%p The above question was answered near the end of lesson 014.

%p I studied lesson 014 and then wrote a Python script which creates a spreadsheet and then creates permissions to make the spreadsheet readable by anyone:

.syntax
  %pre
    =render 'lesson016sheet26py'

%p I ran the above script and collected screen-shots for you:

%img(src='/lesson016/lesson016f5.png')
%hr/

%p Notice that in the image below, I access the spreadsheet using a browser which is not logged into Google; I consider that to be good evidence that the spreadsheet is readable by anyone:

%img(src='/lesson016/lesson016f6.png')
%hr/

%p To further make the point, I encourage you to access the the spreadsheet.

%p The URL is listed below:

%a(target='g' href='https://docs.google.com/spreadsheets/d/1In-pfZs2W69E6P7hmhBeSuvLJmBaN4KdJrUDsBSWKZc/edit')
  https://docs.google.com/spreadsheets/d/1In-pfZs2W69E6P7hmhBeSuvLJmBaN4KdJrUDsBSWKZc/edit

%p Granting reader privilege to anyone is a common use-case.

%p Another use-case is to grant writer to a specific person.

%p The Google-drive API implements this idea by asking me to supply a gmail-address of the specific person who will write data to my spreadsheet.

%p The Python script demonstrates syntax which worked well for me:

.syntax
  %pre
    =render 'lesson016sheet27py'

%p I ran the above script and collected screen-shots for you:

%img(src='/lesson016/lesson016f7.png')
%hr/

%p bikle101@gmail.com can write:

%img(src='/lesson016/lesson016f8.png')
%hr/

%p Anyone else cannot read nor write:

%img(src='/lesson016/lesson016f9.png')
%hr/

%hr/
