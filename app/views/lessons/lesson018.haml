%h1#top Lesson 018 [ Python Meetup 2019-08-22 ]

%p This lesson is customized for Python Meetup 2019-08-22.

%pre
  Summary:
  Python + Google [pdb drilldown]
  \===============================
  
  In May, Wesley Chun presented a wide exploration of Google APIs with Python.
  
  In this presentation, Dan Bikle presents a drill-down into some
  specific scripts which connect Python with Google services via Google APIs.
  
  The presentation will be targeted at people new to both Python and Google APIs.
  
  Using Python to interact with Google APIs is an effective way to learn both technologies.
  
  Each script will serve as a stand-alone lesson.
  
  To start, Dan will discuss each script from a general perspective.
  
  Then Dan will operate each script inside the Python pdb debugger to give
  you a look at how each line contributes action to an overall goal.
  
  Some topics we cover will be listed below:
  
  * Ubuntu as a training and development environment
  * GCP Projects
  * Accessing an Ubuntu environment from a chrome browser
  * Python installation
  * Python packages
  * Installation of google-api-python-client
  * pdb
  * Google product categories
  * Google Drive
  * Google Sheets
  * GCP Service Accounts
  * Authentication + Authorization + JSON
  * Service Account Key creation
  * Google Drive + Python
  * Local-File read-write with Python
  * Python-Only Google Authentication
  * Declare Authorizations with Python
  * File upload to Google Drive
  * Python manipulation of Google Drive permissions:
  * * Make file world-readable
  * * Grant write-privilege to a gmail-address
  * List Sharable-URLs of files in Google Drive
  * Google Sheets + Python
  * Create a Sheet
  * Understand "A1 Notation"
  * Add rows to a Sheet
  * * Make Sheet world-readable
  * * Grant write-privilege to a gmail-address
  * Sheets are complicated, So is the API.
  * Let's explore the Sheets API.
  
  Bio
  \===
  Dan Bikle builds Full-Stack Machine-Learning Apps.
  Dan graduated from Caltech with a BSEE.
  There he learned: "The truth shall make you free."

%hr/

%h1 Ubuntu as a Training and Development Environment

%p When I offer training to my students I want them to use Ubuntu.

%p Why?

%p Ubuntu offers a stable consistent experience in a world which frequently changes.

%p The two main alternatives, Mac and windows, offer an inconsistent experience in a world which frequently changes.

%p If I write a simple software lesson on Mac or windows in 2019, that lesson will be instructive for somewhere between 12 days and 12 months.

%p If I write a software lesson on Ubuntu18 in 2019, that lesson might be instructive until 2023 when Ubuntu18 is replaced by Ubuntu20.

%p Ubuntu offers other advantages as well but consistency is my main pitch.

%p As a student-developer, how to get access to Ubuntu18?

%p I suggest some possibilities:

%ul
  %li Buy an Ubuntu laptop [this is what I do].
  %li Run Ubuntu inside Mac or windows using Virtualization.
  %li Run Ubuntu on the cloud inside my GCP account.
  %li Run Ubuntu on the cloud inside my AWS account.

%p In this Meetup, I will show you Python demonstrations using Ubuntu18 on the cloud inside my GCP account.

%p If my WIFI dies, I will show you Python demonstrations using Ubuntu16 on my laptop.

%h1 GCP Account

%p If you want a GCP account you will need a credit card.

%p I got my credit card and I searched for the GCP $300 credit:

%p
  %a(href='https://www.google.com/search?q=GCP+$300+credit' target='x')
    https://www.google.com/search?q=GCP+$300+credit
    
%p I used the above link, and my credit card to get a GCP account.

%h1 Login to GCP Account

%p To login to my GCP account I visit the URL listed below:

%p
  %a(href='https://www.google.com/search?q=GCP+Login' target='x')
    https://www.google.com/search?q=GCP+Login

%p I usually study the above page and then visit this URL:
%p
  %a(href='https://cloud.google.com/' target='x')
    https://cloud.google.com/
    
%p I used the above page to help me login using a mechanism similar to the forms I use to login to Gmail.

%p I saw this:

%img(src='/lesson018/p100.png')
%hr/

%p After you create your GCP account you will see something different.

%h1 GCP Projects

%p So that we are both on the same page, I suggest that you create a new project named: "mup0822" which corresponds to Meetup 08-22.

%p To do that I searched Google with a how-to question:

%p
  %a(href='https://www.google.com/search?q=In+Google+Cloud+GCP+How+To+Create+Project' target='x')
    https://www.google.com/search?q=In+Google+Cloud+GCP+How+To+Create+Project
  
%p After a bit of study, I found a useful URL for creating a new project:
%p
  %a(href='https://console.cloud.google.com/projectcreate' target='x')
    https://console.cloud.google.com/projectcreate

%p GCP served me a form with one field and I entered the name: "mup0822":

%img(src='/lesson018/p101.png')
%hr/

%p I clicked the blue-Create button.

%p Eventually, I saw the project. I saw it listed near the top of the page:

%img(src='/lesson018/p102.png')
%hr/

%h1 Accessing an Ubuntu Environment from a Chrome Browser

%p GCP offers a useful feature to students who are new to Linux.
%p I call it: "Shell in a browser".

%p To activate this feature in my browser, I visited the URL listed below:

%p
  %a(href='https://console.cloud.google.com/compute' target='x')
    https://console.cloud.google.com/compute

%p I saw this:

%img(src='/lesson018/p103.png')
%hr/

%p I clicked the blue-Create button.

%p I worked through a series of forms to launch an Ubuntu18 host:

%img(src='/lesson018/p104.png')
%hr/

%img(src='/lesson018/p105.png')
%hr/

%img(src='/lesson018/p106.png')
%hr/

%img(src='/lesson018/p107.png')
%hr/

%img(src='/lesson018/p108.png')
%hr/

%p I clicked the dark-black-SSH link on the RHS of the above page.

%p GCP served me an Ubuntu18 Bash prompt in a Chrome browser.
%p
  I call it: "Shell in a browser" and I see it as a powerful feature
  which I wish all cloud-providers offered:

%img(src='/lesson018/p109.png')
%hr/

%h1 Python Installation

%p Now that we are at August of 2019, the best version of Python to use with the Google APIs is Python3.

%p Using the "which" shell-command, I looked for Python3 in my new Ubuntu18-host and I found it:

%img(src='/lesson018/p110.png')
%hr/

%h1 Python Packages

%p The Python language is modular.

%p We can extend Python using packages which we copy from the internet to our Ubuntu18-host.

%p Google provides a package called google-api-python-client which allows us to connect Python with the Google APIs.

%p The shell-command I use to copy google-api-python-client to my Ubuntu18-host is listed below:

.syntax
  %pre
    %code sudo pip3 install google-api-python-client

%p I ran the above command and saw this:

%img(src='/lesson018/p111.png')
%hr/

%p I ran another shell-command to install pip3:

.syntax
  %pre
    %code sudo apt install python3-pip
    
%p I saw this:

%img(src='/lesson018/p112.png')
%hr/

%p I asked Google-search for help:

%p
  %a(href='https://www.google.com/search?q=Unable+to+locate+package+python3-pip' target='x')
    https://www.google.com/search?q=Unable+to+locate+package+python3-pip

%p I learned that 'apt install' depends on 'apt update'.

%p So I ran another shell-command:
.syntax
  %pre
    %code sudo apt update

%p Ubuntu reacted well to the above command.

%p So I ran another shell-command to install pip3:

.syntax
  %pre
    %code sudo apt install python3-pip

%p Ubuntu reacted well to the above command.

%h1 Installation of google-api-python-client

%p So I ran another shell-command to install google-api-python-client:

.syntax
  %pre
    %code sudo pip3 install google-api-python-client

%p After I ran the above command I saw this:

%img(src='/lesson018/p113.png')
%hr/

%p The above output convinced me that I had installed google-api-python-client.

%h1 pdb

%p One of my favorite packages is pdb.

%p Although it is a package, I have never needed to install it using pip or pip3. It is installed during Python installation.

%p I offer a simple script below which I used to study pdb on my ubuntu18 host:

.syntax
  %pre
    =render 'lesson18a'

%p I ran the above script and collected output for you:

%img(src='/lesson018/p114.png')
%hr/

%img(src='/lesson018/p115.png')
%hr/

%img(src='/lesson018/p116.png')
%hr/

%p The above images demonstrate the "n" command which is short for "next".

%p My next favorite command is the "b" command which is short for "break".

%p I would have preferred that "break" be called: "stop here".

%p The word "break" is confusing here; "stop here" is clear.

%p
  In the image below I break at line 19 so that I can study Python's
  behavior as it interacts with line 19:

%img(src='/lesson018/p117.png')
%hr/

%img(src='/lesson018/p118.png')
%hr/

%p So, I consider that a quick introduction to pdb.

%p Next, I used pdb to study the Python script listed below:

.syntax
  %pre
    =render 'lesson18b'

%p To start on that study, I typed in a shell command:

.syntax
  %pre
    %code python3 -m pdb lesson18b.py

%p I saw this:

%img(src='/lesson018/p119.png')
%hr/

%p
  I used both "l" and "n" pdb-commands to slowly run and watch the behavior
  of each line of syntax in the script:

%img(src='/lesson018/p120.png')
%hr/

%p From that interaction, I learned that line-18 was a problem.

%p I list line-18 below:

.syntax
  %pre
    %code from oauth2client.service_account import ServiceAccountCredentials

%p I quit pdb with the q command.

%p I used google-search to study the problem:
%p
  %a(href='https://www.google.com/search?q=python+ModuleNotFoundError:+No+module+named+oauth2client' target='x')
    https://www.google.com/search?q=python+ModuleNotFoundError:+No+module+named+oauth2client
  
%p I used a pip3 shell command to fix the problem:

.syntax
  %pre
    %code sudo pip3 install oauth2client

%p I started another pdb session to look for more bugs:

.syntax
  %pre
    %code python3 -m pdb lesson18b.py

%p I saw this:

%img(src='/lesson018/p121.png')
%hr/

%p Then these screens as I moved along:

%img(src='/lesson018/p122.png')
%hr/

%img(src='/lesson018/p123.png')
%hr/

%p I found a bug on line-32:

%img(src='/lesson018/p124.png')
%hr/

%p I fixed the above bug by using the Google web-UI to create two things:
%ul
  %li A "Service-Account"
  %li A JSON file containing "credentials"

%p These items are key ingredients to the mechanism I use to connect my Python scripts to Google APIs.

%p Normally when I want to interact with Google resources, I login using my Gmail account and a password.

%p My Python scripts cannot do that so they use a Service-Account and a JSON file containing credentials.

%ul
  %li Q: How to create a Service-Account?
  %li Q: How to create a JSON file containing "credentials"?

%h1 Service-Account

%p I visited the URL listed below:

%p
  %a(href='https://console.cloud.google.com/iam-admin/serviceaccounts?project=mup0822' target='x')
    https://console.cloud.google.com/iam-admin/serviceaccounts?project=mup0822
  
%p I saw this:

%img(src='/lesson018/p125.png')
%hr/

%p At the top, I clicked the blue-link: "+CREATE SERVICE ACCOUNT".

%p I entered a simple name: "acct0822".

%p I saw this:

%img(src='/lesson018/p126.png')
%hr/

%p I clicked the blue-CREATE button at the bottom. 

%p I saw this:

%img(src='/lesson018/p127.png')
%hr/

%p I picked a role which had many privileges: Project Owner

%p I saw this:

%img(src='/lesson018/p128.png')
%hr/

%p I clicked the blue-CONTINUE button at the bottom. 

%p I saw this:

%img(src='/lesson018/p129.png')
%hr/

%p I clicked the blue-DONE button at the bottom. 

%p I saw this:

%img(src='/lesson018/p130.png')
%hr/

