%h1#top Lesson 018 [ Python Meetup 2019-08-22 ]

%p Meetup:
%p
  %a(href='https://www.meetup.com/BAyPIGgies/events/264160722/' target='x')
    https://www.meetup.com/BAyPIGgies/events/264160722/

%p This lesson is customized for Python Meetup 2019-08-22.

%h1 Ubuntu as a Training and Development Environment

%p When I offer training to my students I want them to use Ubuntu.

%p Why?

%p Ubuntu offers a stable consistent experience in a world which frequently changes.

%p The two main alternatives, Mac and windows, offer an inconsistent experience in a world which frequently changes.

%p If I write a simple software lesson on Mac or windows in 2019, that lesson will be instructive for somewhere between 12 days and 12 months.

%p If I write a software lesson on Ubuntu18 in 2019, that lesson might be instructive until 2023 when Ubuntu18 is replaced by Ubuntu20.

%p Ubuntu offers other advantages as well but consistency is my main pitch.

%p As a student-developer, how to get access to Ubuntu18?

%p I suggest some possibilities:

%ul
  %li Buy an Ubuntu laptop [this is what I do].
  %li Run Ubuntu inside Mac or windows using Virtualization.
  %li Run Ubuntu on the cloud inside my GCP account.
  %li Run Ubuntu on the cloud inside my AWS account.

%p In this Meetup, I will show you Python demonstrations using Ubuntu18 on the cloud inside my GCP account.

%p If my WIFI dies, I will show you Python demonstrations using Ubuntu16 on my laptop.

%h1 GCP Account

%p If you want a GCP account you will need a credit card.

%p I got my credit card and I searched for the GCP $300 credit:

%p
  %a(href='https://www.google.com/search?q=GCP+$300+credit' target='x')
    https://www.google.com/search?q=GCP+$300+credit
    
%p I used the above link, and my credit card to get a GCP account.

%h1 Login to GCP Account

%p To login to my GCP account I visit the URL listed below:

%p
  %a(href='https://www.google.com/search?q=GCP+Login' target='x')
    https://www.google.com/search?q=GCP+Login

%p I usually study the above page and then visit this URL:
%p
  %a(href='https://cloud.google.com/' target='x')
    https://cloud.google.com/
    
%p I used the above page to help me login using a mechanism similar to the forms I use to login to Gmail.

%p I saw this:

%img(src='/lesson018/p100.png')
%hr/

%p After you create your GCP account you will see something different.

%h1 GCP Projects

%p So that we are both on the same page, I suggest that you create a new project named: "mup0822" which corresponds to Meetup 08-22.

%p To do that I searched Google with a how-to question:

%p
  %a(href='https://www.google.com/search?q=In+Google+Cloud+GCP+How+To+Create+Project' target='x')
    https://www.google.com/search?q=In+Google+Cloud+GCP+How+To+Create+Project
  
%p After a bit of study, I found a useful URL for creating a new project:
%p
  %a(href='https://console.cloud.google.com/projectcreate' target='x')
    https://console.cloud.google.com/projectcreate

%p GCP served me a form with one field and I entered the name: "mup0822":

%img(src='/lesson018/p101.png')
%hr/

%p I clicked the blue-Create button.

%p Eventually, I saw the project. I saw it listed near the top of the page:

%img(src='/lesson018/p102.png')
%hr/

%h1 Accessing an Ubuntu Environment from a Chrome Browser

%p GCP offers a useful feature to students who are new to Linux.
%p I call it: "Shell in a browser".

%p To activate this feature in my browser, I visited the URL listed below:

%p
  %a(href='https://console.cloud.google.com/compute' target='x')
    https://console.cloud.google.com/compute

%p I saw this:

%img(src='/lesson018/p103.png')
%hr/

%p I clicked the blue-Create button.

%p I worked through a series of forms to launch an Ubuntu18 host:

%img(src='/lesson018/p104.png')
%hr/

%img(src='/lesson018/p105.png')
%hr/

%img(src='/lesson018/p106.png')
%hr/

%img(src='/lesson018/p107.png')
%hr/

%img(src='/lesson018/p108.png')
%hr/

%p I clicked the dark-black-SSH link on the RHS of the above page.

%p GCP served me an Ubuntu18 Bash prompt in a Chrome browser.
%p
  I call it: "Shell in a browser" and I see it as a powerful feature
  which I wish all cloud-providers offered:

%img(src='/lesson018/p109.png')
%hr/

%h1 Python Installation

%p Now that we are at August of 2019, the best version of Python to use with the Google APIs is Python3.

%p Using the "which" shell-command, I looked for Python3 in my new Ubuntu18-host and I found it:

%img(src='/lesson018/p110.png')
%hr/

%h1 Python Packages

%p The Python language is modular.

%p We can extend Python using packages which we copy from the internet to our Ubuntu18-host.

%p Google provides a package called google-api-python-client which allows us to connect Python with the Google APIs.

%p The shell-command I use to copy google-api-python-client to my Ubuntu18-host is listed below:

.syntax
  %pre
    %code sudo pip3 install google-api-python-client

%p I ran the above command and saw this:

%img(src='/lesson018/p111.png')
%hr/

%p I ran another shell-command to install pip3:

.syntax
  %pre
    %code sudo apt install python3-pip
    
%p I saw this:

%img(src='/lesson018/p112.png')
%hr/

%p I asked Google-search for help:

%p
  %a(href='https://www.google.com/search?q=Unable+to+locate+package+python3-pip' target='x')
    https://www.google.com/search?q=Unable+to+locate+package+python3-pip

%p I learned that 'apt install' depends on 'apt update'.

%p So I ran another shell-command:
.syntax
  %pre
    %code sudo apt update

%p Ubuntu reacted well to the above command.

%p So I ran another shell-command to install pip3:

.syntax
  %pre
    %code sudo apt install python3-pip

%p Ubuntu reacted well to the above command.

%h1 Installation of google-api-python-client

%p So I ran another shell-command to install google-api-python-client:

.syntax
  %pre
    %code sudo pip3 install google-api-python-client

%p After I ran the above command I saw this:

%img(src='/lesson018/p113.png')
%hr/

%p The above output convinced me that I had installed google-api-python-client.

%h1 git clone

%p The Python scripts in this presentation can be copy/pasted with a mouse.

%p And then they might work.

%p The Python scripts in this presentation should be in a git repo.

%p Instead of a mouse, I used the shell commands listed below to copy the Python scripts into my Ubuntu18-host:

.syntax
  %pre
    %code
      cd ~
      git clone https://github.com/danbikle/cs101
      cd cs101/public/lesson018
      ls -la *py

%h1 pdb

%p One of my favorite packages is pdb.

%p Although it is a package, I have never needed to install it using pip or pip3. It is installed during Python installation.

%p I offer a simple script below which I used to study pdb on my ubuntu18 host:

.syntax
  %pre
    =render 'lesson18a'

%p I ran the above script and collected output for you:

%img(src='/lesson018/p114.png')
%hr/

%img(src='/lesson018/p115.png')
%hr/

%img(src='/lesson018/p116.png')
%hr/

%p The above images demonstrate the "n" command which is short for "next".

%p My next favorite command is the "b" command which is short for "break".

%p I would have preferred that "break" be called: "stop here".

%p The word "break" is confusing here; "stop here" is clear.

%p
  In the image below I break at line 19 so that I can study Python's
  behavior as it interacts with line 19:

%img(src='/lesson018/p117.png')
%hr/

%img(src='/lesson018/p118.png')
%hr/

%p So, I consider that a quick introduction to pdb.

%p#lesson18b Next, I used pdb to study the Python script listed below:

.syntax
  %pre
    =render 'lesson18b'

%p To start on that study, I typed in a shell command:

.syntax
  %pre
    %code python3 -m pdb lesson18b.py

%p I saw this:

%img(src='/lesson018/p119.png')
%hr/

%p
  I used both "l" and "n" pdb-commands to slowly run and watch the behavior
  of each line of syntax in the script:

%img(src='/lesson018/p120.png')
%hr/

%p From that interaction, I learned that line-18 was a problem.

%p I list line-18 below:

.syntax
  %pre
    %code from oauth2client.service_account import ServiceAccountCredentials

%p I quit pdb with the q command.

%p I used google-search to study the problem:
%p
  %a(href='https://www.google.com/search?q=python+ModuleNotFoundError:+No+module+named+oauth2client' target='x')
    https://www.google.com/search?q=python+ModuleNotFoundError:+No+module+named+oauth2client
  
%p I used a pip3 shell command to fix the problem:

.syntax
  %pre
    %code sudo pip3 install oauth2client

%p I started another pdb session to look for more bugs:

.syntax
  %pre
    %code python3 -m pdb lesson18b.py

%p I saw this:

%img(src='/lesson018/p121.png')
%hr/

%p Then these screens as I moved along:

%img(src='/lesson018/p122.png')
%hr/

%img(src='/lesson018/p123.png')
%hr/

%p I found a bug on line-32:

%img(src='/lesson018/p124.png')
%hr/

%p I fixed the above bug by using the Google web-UI to create two things:
%ul
  %li A "Service-Account"
  %li A JSON file containing "credentials"

%p These items are key ingredients to the mechanism I use to connect my Python scripts to Google APIs.

%p Normally when I want to interact with Google resources, I login using my Gmail account and a password.

%p My Python scripts cannot do that so they use a Service-Account and a JSON file containing credentials.

%ul
  %li Q: How to create a Service-Account?
  %li Q: How to create a JSON file containing "credentials"?

%h1 Service-Account

%p I visited the URL listed below:

%p
  %a(href='https://console.cloud.google.com/iam-admin/serviceaccounts?project=mup0822' target='x')
    https://console.cloud.google.com/iam-admin/serviceaccounts?project=mup0822
  
%p I saw this:

%img(src='/lesson018/p125.png')
%hr/

%p At the top, I clicked the blue-link: "+CREATE SERVICE ACCOUNT".

%p I entered a simple name: "acct0822".

%p I saw this:

%img(src='/lesson018/p126.png')
%hr/

%p I clicked the blue-CREATE button at the bottom. 

%p I saw this:

%img(src='/lesson018/p127.png')
%hr/

%p I picked a role which had many privileges: Project Owner

%p I saw this:

%img(src='/lesson018/p128.png')
%hr/

%p I clicked the blue-CONTINUE button at the bottom. 

%p I saw this:

%img(src='/lesson018/p129.png')
%hr/

%p I clicked the blue-DONE button at the bottom. 

%p I saw this:

%img(src='/lesson018/p130.png')
%hr/

%h1 JSON file containing "credentials"

%p I started this effort by visiting the URL listed below:

%p
  %a(href='https://console.cloud.google.com/apis/credentials' target='x')
    https://console.cloud.google.com/apis/credentials
  
%p I saw this:

%img(src='/lesson018/p131.png')
%hr/

%p I clicked the blue-"Create credentials" button.

%p Google responded with a form:

%img(src='/lesson018/p132.png')
%hr/

%p I clicked: "Service account key".

%p I saw this:

%img(src='/lesson018/p133.png')
%hr/

%p I noticed the blue button at the bottom was greyed-out.

%p I picked "acct0822" from the select-options.

%p The blue button at the bottom turned blue and I clicked it.

%p I saw this:

%img(src='/lesson018/p134.png')
%hr/

%p Chrome indicated that Google had placed a JSON file in the Downloads folder of my laptop.

%p I changed the name of the file to secret0822.json

%p Then I copied the file to the home folder of my GCP-Ubuntu18 host:

%img(src='/lesson018/p135.png')
%hr/

%img(src='/lesson018/p136.png')
%hr/

%img(src='/lesson018/p137.png')
%hr/

%h1 More pdb

%p I returned to my Ubuntu18-shell.

%p I saw this:

%img(src='/lesson018/p138.png')
%hr/

%p I started pdb with a shell command:
.syntax
  %pre
    %code python3 -m pdb lesson18b.py

%p I used "n" and "l" to step through the code.

%p I got past the bug I saw earlier on line 32.

%p I bumped into the next bug on line 49:

%img(src='/lesson018/p139.png')
%hr/

%h1 Enable Drive API

%p The above error message is informative.

%p It told me that I needed to enable the Drive API.

%p I asked google-search for help:
%p
  %a(href='https://www.google.com/search?q=In+GSuite+how+to+enable+Google+Drive+API' target='x')
    https://www.google.com/search?q=In+GSuite+how+to+enable+Google+Drive+API

%p After studying the search-results I visited the URL listed below:

%p
  %a(href='https://console.cloud.google.com/apis/library' target='x')
    https://console.cloud.google.com/apis/library

%p I saw this:

%img(src='/lesson018/p140.png')
%hr/

%p I found the box for the Drive-API:

%img(src='/lesson018/p141.png')
%hr/

%p I clicked it.

%p I enabled the Drive-API:

%img(src='/lesson018/p142.png')
%hr/

%p I waited 5 minutes for my request to propagate through GCP.

%h1 More pdb

%p I returned to my Ubuntu18-shell.

%p I saw this:

%img(src='/lesson018/p138.png')
%hr/

%p I started pdb with a shell command:
.syntax
  %pre
    %code python3 -m pdb lesson18b.py

%p I used "n" and "l" to step through the code.

%p I got past the bug I saw earlier on line 49.

%p In fact, I stepped through the entire script with no problems.

%p The last line of the script is line-78.

%p After pdb ran line-78, I entered to "q" command to quit pdb:

%img(src='/lesson018/p143.png')
%hr/

%p The script printed out the URL of a simple file which it copied to Google Drive:

%p
  %a(href='https://drive.google.com/file/d/1ufkoZInhI3c6XH9rMQi0AK9sH3hjGZQS/view?usp=drivesdk' target='x')
    https://drive.google.com/file/d/1ufkoZInhI3c6XH9rMQi0AK9sH3hjGZQS/view?usp=drivesdk
  
%p You should be able to see the file because the script granted 'reader' role to 'anyone' using syntax listed below:

.syntax
  %pre
    =render 'lesson018c'

%h1 lesson18b.py

%p
  After I configured my GCP account and secret0822.json file,
  I saw that lesson18b.py would run error free.

%p
  If you want to study lesson18b.py,
  you will see it listed
  %a(href='#lesson18b') above
  or served from github:
%p
  %a(href='https://github.com/danbikle/cs101/blob/master/public/lesson018/lesson18b.py' target='x')
    https://github.com/danbikle/cs101/blob/master/public/lesson018/lesson18b.py
  
%p The script starts with syntax called "Docstring".
%p Docstring Conventions are described at the URL listed below:
%p
  %a(href='https://www.python.org/dev/peps/pep-0257/' target='x')
    https://www.python.org/dev/peps/pep-0257/
    
%p When I write production-Python, I try to use docstring conventions described in the above URL.

%p
  When I write docstrings for scripts to be studied by students, like lesson18b.py,
  I use an unconventional style which should convey some kind of educational concept.
  The usual concepts are:
  
%ul
  %li What the script should do
  %li How the student can run the script

%p The docstring for lesson18b.py is listed below:
.syntax
  %pre
    =render 'lesson018d'

%p After the docstring, the script calls a series of imports:
.syntax
  %pre
    =render 'lesson018e'

%p I wrote the above syntax after using google-search to study a simple question:

%p
  %a(href='https://www.google.com/search?q=On+google+GCP+how+to+connect+python+to+oauth2' target='x')
    https://www.google.com/search?q=On+google+GCP+how+to+connect+python+to+oauth2


%p Results from the above result included some Google documentation.
%p None of the documentation seemed to answer the above question.
%p I did find a helpful page on StackOverflow and now I use that syntax.

%p One problem with the above imports is that oauth2client-package is old:
%p
  %a(href='https://github.com/googleapis/oauth2client/blob/master/README.md' target='x')
    https://github.com/googleapis/oauth2client/blob/master/README.md

%p Eventually I will figure out how to replace it with a newer, better package.

%p After the imports, the script calls syntax to copy a small file into a string:

.syntax
  %pre
    =render 'lesson018f'
    
%p When I teach Python to beginners, sometimes I will derive some questions from some syntax rather than explaining the syntax.

%p I offer some questions below to help you explain the above syntax to yourself:

%ul
  %li What is the os-package?
  %li How to learn more about the os-package?
  %li How to get the value of a Linux env-variable?
  %li Why do I put "_s" at the end of secretf_s?
  %li How to concatenate two strings?
  %li What does open() do?
  %li What does 'with' do?
  %li How to learn more about the open() call?
  %li Does open() reside in a package or is it by "itself"?
  %li What kind of argument does open() take?
  %li How to read a small text-file into a string?
  %li Why do I call fh, "fh"?
  %li How to see the first 66 characters of a string?
  %li How is a string like a list?
  
%p
  After copying secret0822.json into json_s,
  the script calls syntax to connect the script to Google Drive API:

.syntax
  %pre
    =render 'lesson018g'

%p I offer some questions below to help you explain the above syntax to yourself:

%ul
  %li Why is SCOPES capitalized?
  %li Why is SCOPES called "SCOPES"?
  %li Which method creates credentials?
  %li Why does from_json_keyfile_name() take two args?
  %li Why is SCOPES a List?
  %li The first arg of build() is 'drive'; what does that tell you?
  %li What other strings besides 'drive' might be accepted?
  %li OAuth combines authentication and authorization; what's that mean?
  %li Does the above syntax combine authentication and authorization?
  %li If yes, how?

%p Next, the script prints information about the service object and then writes a string into a local file:

.syntax
  %pre
    =render 'lesson018h'
    
%p I offer some questions below to help you explain the above syntax to yourself:

%ul
  %li Would you expect the service object to be a String?
  %li How does this second call to open() differ from the first call?
  %li What is this syntax: "\n" ?
  %li Will the above syntax fail if /tmp/hello.txt already exists?

%p Next, the script copies a text-file to Google Drive:

.syntax
  %pre
    =render 'lesson018i'
    
%p I offer some questions below to help you explain the above syntax to yourself:

%ul
  %li What kind of Python object is: "file_metadata"
  %li In web-technology, what is mimetype?
  %li To upload the file, I call: service.files().create()
  %li Why did the product-mgr specify a method named: "create()" rather than: "upload()"?
  %li What happens if I forget to issue a call to .execute()?
  %li The third argument to .create() is fields='id', what's that do?
  %li Why is file_id useful later in the script?

%p Next, the script creates a permission:

.syntax
  %pre
    =render 'lesson018j'

%ul
  %li Which permission is granted?
  %li What allows the script to create this permission?
  %li Why did the product-mgr specify a method named: "create()" rather than: "grant()"?
  %li Why does the create()-call need file_id?
  %li Should I expect pc_response to be a String?
  
  
%p Next, the script creates another permission:

.syntax
  %pre
    =render 'lesson018k'

%ul
  %li Which permission is granted?
  %li How to test that the permission was granted?
  
%p Next, the script gets a "webViewLink":

.syntax
  %pre
    =render 'lesson018l'

%ul
  %li What is a "webViewLink"?
  %li Why is a "webViewLink" useful?

%hr/

%h1 Google Sheets: lesson18c.py

%p I wrote the script listed below:

.syntax
  %pre
    =render 'lesson018m'

%p I used the shell command below to run the above script inside pdb:

.syntax
  %pre
    %code python3 -m pdb lesson18c.py

%p I used "l" and "n" commands to slowly run the script while I watched it.

%p The script encountered a bug on line 43:

%img(src='/lesson018/p144.png')
%hr/

%p To fix the bug, I visited the URL listed below:

%p
  %a(href='https://console.cloud.google.com/apis/library' target='x')
    https://console.cloud.google.com/apis/library

%p There, I clicked the square for Google Sheets API:

%img(src='/lesson018/p145.png')
%hr/

%p I clicked the blue-Enable button and waited 5 minutes:

%img(src='/lesson018/p146.png')
%hr/

%p Again, I used the shell command below to run the above script inside pdb:

.syntax
  %pre
    %code python3 -m pdb lesson18c.py

%p I used "l" and "n" commands to slowly run the script while I watched it.

%p The script encountered no more bugs!

%h1 lesson018c.py

%p You can find a copy of the above script at the URL listed below:
%p
  %a(href='https://github.com/danbikle/cs101/blob/master/public/lesson018/lesson18c.py' target='x')
    https://github.com/danbikle/cs101/blob/master/public/lesson018/lesson18c.py

%p To help myself remember details in the script, I ask myself questions about it.

%p Below, I list the first 40 lines of the script:

.syntax
  %pre
    =render 'lesson018n'
%ul
  %li At this point, how is lesson018c.py different than lesson018b.py?
  %li Both scripts get credentials from secret0822.json; does that make sense?
  %li The SCOPES list authorizes drive-access; does that make sense?
  %li How is the service-object different between the two scripts?

%p I list more lines from the script:

.syntax
  %pre
    =render 'lesson018p'

%ul
  %li What is the purpose of field_s?
  %li Is the title of the sheet specified in body_d?
  %li What happens if I forget to place .execute() after .create()?
  %li Why is response_ofcreate called: "response_ofcreate"?
  %li Would I expect the value of spreadsheet_id to be a String?
  
%p I list more lines from the script:

.syntax
  %pre
    =render 'lesson018q'

%ul
  %li How does spreadsheet_id relate to spreadsheet_url?
  %li Is spreadsheet_url more useful than spreadsheet_id?
  %li response_ofcreate.get() takes a String, which Strings can I use?
  
%p I list more lines from the script:

.syntax
  %pre
    =render 'lesson018r'

%ul
  %li The string: 'Sheet1' in range_s is what?
  %li The string: 'A1' in range_s is what?
  %li The string: 'Sheet1!A1' in range_s is what?
  %li What does this expression do: valueInputOption='USER_ENTERED' ?
  %li The above syntax makes this call:
  %li service.spreadsheets().values().update()
  %li What other methods besides .update() are available?
  %li After I update a sheet with an API, what should be in the response in your opinion?
  
%p I list more lines from the script:

.syntax
  %pre
    =render 'lesson018s'

%ul
  %li Is the above syntax familiar?
  %li Does it make sense that the syntax would be similar between two scripts?

%h1 The End

%hr/

%p If you want to work through this presentation with your laptop, I will help you. I offer two classes of Free training:

%ul
  %li
    Saturday 2019-08-24 3:30pm Palo Alto:
    %br/
    %a(href='https://www.eventbrite.com/e/python-google-api-training-tickets-69818518067' target='x')
      https://www.eventbrite.com/e/python-google-api-training-tickets-69818518067
  %li
    Sunday 2019-08-25 3:30pm Palo Alto:
    %br/
    %a(href='https://www.eventbrite.com/e/copy-of-python-google-api-training-tickets-70198735307    ' target='x')
      https://www.eventbrite.com/e/copy-of-python-google-api-training-tickets-70198735307
  



%hr/
%h1 Thanks for helping me study this technology.
%h2 Thanks to Glen for asking me to speak.
%h2 Contact: bikle101@gmail.com
